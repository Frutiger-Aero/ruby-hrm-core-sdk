# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: proto/contractor.proto

require 'google/protobuf'

require_relative 'reason_pb'
require_relative '../node_modules/@qlean/nestjs-typeorm-persistence-search/proto/common-search_pb'

Google::Protobuf::DescriptorPool.generated_pool.build do
  add_file("proto/contractor.proto", :syntax => :proto3) do
    add_message "hrm.core.ContractorBlockRequest" do
      optional :id, :string, 1
      optional :reason, :message, 2, "hrm.core.BlockingReasonRelation"
      optional :startBlockDate, :string, 3
      optional :endBlockDate, :string, 4
    end
    add_message "hrm.core.ContractorCreateRequest" do
      optional :userId, :string, 1
      optional :status, :string, 2
      optional :workStatus, :string, 3
      optional :rating, :double, 4
      optional :regionId, :string, 5
    end
    add_message "hrm.core.ContractorUpdateRequest" do
      optional :id, :string, 1
      optional :userId, :string, 2
      optional :status, :string, 3
      optional :workStatus, :string, 4
      optional :rating, :double, 5
      optional :regionId, :string, 6
    end
    add_message "hrm.core.Contractor" do
      optional :id, :string, 1
      optional :userId, :string, 2
      optional :status, :string, 3
      optional :workStatus, :string, 4
      optional :rating, :double, 5
      optional :regionId, :string, 7
      optional :createdAt, :string, 8
      optional :updatedAt, :string, 9
      optional :isDeleted, :bool, 10
      optional :deletedAt, :string, 11
    end
    add_message "hrm.core.ContractorRelation" do
      optional :id, :string, 1
      optional :userId, :string, 2
      optional :status, :string, 3
      optional :workStatus, :string, 4
      optional :rating, :double, 5
      optional :regionId, :string, 6
    end
    add_message "hrm.core.ContractorResponse" do
      optional :data, :message, 1, "hrm.core.Contractor"
    end
    add_message "hrm.core.ContractorSearchResponse" do
      repeated :data, :message, 1, "hrm.core.Contractor"
      optional :page, :int32, 2
      optional :pageCount, :int32, 3
      optional :limit, :int32, 4
      optional :count, :int32, 5
      optional :total, :int32, 6
    end
    add_message "hrm.core.ContractorSearchRequest" do
      optional :page, :int32, 1
      optional :limit, :int32, 2
      repeated :sort, :message, 3, "qlean.common.search.SortField"
      repeated :where, :message, 4, "hrm.core.ContractorSearchRequest.WhereFields"
    end
    add_message "hrm.core.ContractorSearchRequest.WhereFields" do
      optional :id, :message, 1, "qlean.common.search.UuidCondition"
      optional :isDeleted, :bool, 2
      optional :userId, :message, 3, "qlean.common.search.UuidCondition"
      optional :workStatus, :message, 4, "qlean.common.search.StringCondition"
      optional :status, :message, 5, "qlean.common.search.StringCondition"
    end
  end
end

module Hrm
  module Core
    ContractorBlockRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("hrm.core.ContractorBlockRequest").msgclass
    ContractorCreateRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("hrm.core.ContractorCreateRequest").msgclass
    ContractorUpdateRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("hrm.core.ContractorUpdateRequest").msgclass
    Contractor = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("hrm.core.Contractor").msgclass
    ContractorRelation = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("hrm.core.ContractorRelation").msgclass
    ContractorResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("hrm.core.ContractorResponse").msgclass
    ContractorSearchResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("hrm.core.ContractorSearchResponse").msgclass
    ContractorSearchRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("hrm.core.ContractorSearchRequest").msgclass
    ContractorSearchRequest::WhereFields = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("hrm.core.ContractorSearchRequest.WhereFields").msgclass
  end
end
